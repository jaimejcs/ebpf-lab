// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSys_clone_ebpf returns the embedded CollectionSpec for sys_clone_ebpf.
func loadSys_clone_ebpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Sys_clone_ebpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sys_clone_ebpf: %w", err)
	}

	return spec, err
}

// loadSys_clone_ebpfObjects loads sys_clone_ebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sys_clone_ebpfObjects
//	*sys_clone_ebpfPrograms
//	*sys_clone_ebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSys_clone_ebpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSys_clone_ebpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sys_clone_ebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_clone_ebpfSpecs struct {
	sys_clone_ebpfProgramSpecs
	sys_clone_ebpfMapSpecs
	sys_clone_ebpfVariableSpecs
}

// sys_clone_ebpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_clone_ebpfProgramSpecs struct {
	HandleSysClone *ebpf.ProgramSpec `ebpf:"handle_sys_clone"`
}

// sys_clone_ebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_clone_ebpfMapSpecs struct {
}

// sys_clone_ebpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sys_clone_ebpfVariableSpecs struct {
}

// sys_clone_ebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSys_clone_ebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_clone_ebpfObjects struct {
	sys_clone_ebpfPrograms
	sys_clone_ebpfMaps
	sys_clone_ebpfVariables
}

func (o *sys_clone_ebpfObjects) Close() error {
	return _Sys_clone_ebpfClose(
		&o.sys_clone_ebpfPrograms,
		&o.sys_clone_ebpfMaps,
	)
}

// sys_clone_ebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSys_clone_ebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_clone_ebpfMaps struct {
}

func (m *sys_clone_ebpfMaps) Close() error {
	return _Sys_clone_ebpfClose()
}

// sys_clone_ebpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSys_clone_ebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_clone_ebpfVariables struct {
}

// sys_clone_ebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSys_clone_ebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type sys_clone_ebpfPrograms struct {
	HandleSysClone *ebpf.Program `ebpf:"handle_sys_clone"`
}

func (p *sys_clone_ebpfPrograms) Close() error {
	return _Sys_clone_ebpfClose(
		p.HandleSysClone,
	)
}

func _Sys_clone_ebpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sys_clone_ebpf_bpfeb.o
var _Sys_clone_ebpfBytes []byte
