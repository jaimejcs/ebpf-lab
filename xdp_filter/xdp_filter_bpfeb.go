// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_filter returns the embedded CollectionSpec for xdp_filter.
func loadXdp_filter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_filterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_filter: %w", err)
	}

	return spec, err
}

// loadXdp_filterObjects loads xdp_filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_filterObjects
//	*xdp_filterPrograms
//	*xdp_filterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_filterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_filter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_filterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_filterSpecs struct {
	xdp_filterProgramSpecs
	xdp_filterMapSpecs
	xdp_filterVariableSpecs
}

// xdp_filterProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_filterProgramSpecs struct {
	XdpFilter *ebpf.ProgramSpec `ebpf:"xdp_filter"`
}

// xdp_filterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_filterMapSpecs struct {
	BlockedIps *ebpf.MapSpec `ebpf:"blocked_ips"`
}

// xdp_filterVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_filterVariableSpecs struct {
}

// xdp_filterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_filterObjects struct {
	xdp_filterPrograms
	xdp_filterMaps
	xdp_filterVariables
}

func (o *xdp_filterObjects) Close() error {
	return _Xdp_filterClose(
		&o.xdp_filterPrograms,
		&o.xdp_filterMaps,
	)
}

// xdp_filterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_filterMaps struct {
	BlockedIps *ebpf.Map `ebpf:"blocked_ips"`
}

func (m *xdp_filterMaps) Close() error {
	return _Xdp_filterClose(
		m.BlockedIps,
	)
}

// xdp_filterVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadXdp_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_filterVariables struct {
}

// xdp_filterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_filterPrograms struct {
	XdpFilter *ebpf.Program `ebpf:"xdp_filter"`
}

func (p *xdp_filterPrograms) Close() error {
	return _Xdp_filterClose(
		p.XdpFilter,
	)
}

func _Xdp_filterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_filter_bpfeb.o
var _Xdp_filterBytes []byte
